mlm <- lm(m2.price ~., data = apartments)
explainer <- DALEX2::explain(model = mrf,
data = apartments_test[, -1])
explainer2 <- DALEX2::explain(model = mlm,
data = apartments_test[, -1])
new_observation <- apartments_test[5, -1]
new_observation
model_lok <- individual_surrogate_model(explainer, new_observation,
size = 500, seed = 17)
model_lok2 <- individual_surrogate_model(explainer2, new_observation,
size = 500, seed = 17)
plot(individual_conditional_expectations(
mrf,
new_observation,
variables = 'construction.year'
))
plot(individual_conditional_expectations(
mrf,
new_observation = new_observation,
variables = 'construction.year'
))
plot(individual_conditional_expectations(
mrf,
new_observation = new_observation,
variables = 'construction.year',
data = apartments_test
))
library(ctree)
??"ctree"
library(partykit)
cp_curve <- individual_conditional_expectations(
mrf,
new_observation = new_observation,
variables = 'construction.year',
data = apartments_test
)
colnames(cp_curve)
head(cp_curve)
ctree(`_yhat_` ~ construction.year, data = cp_curve)
plot(ctree(`_yhat_` ~ construction.year, data = cp_curve))
drzewo <- ctree(`_yhat_` ~ construction.year, data = cp_curve)
predict(drzewo, data.frame(construction.year = 1934))
predict(drzewo, data.frame(construction.year = 1920))
predict(drzewo, data.frame(construction.year = 1940))
predict(drzewo, data.frame(construction.year = 1936))
drzewo <- ctree(`_yhat_` ~ construction.year, data = cp_curve,
maxdepth = 2)
plot(ctree(`_yhat_` ~ construction.year, data = cp_curve))
plot(ctree(`_yhat_` ~ construction.year, data = cp_curve))
plotdrzewo)
plot(drzewo)
predict(drzewo, data.frame(construction.year = 1934))
predict(drzewo, data.frame(construction.year = 1920))
predict(drzewo, data.frame(construction.year = 1957))
predict(drzewo, data.frame(construction.year = 1994))
predict(drzewo, data.frame(construction.year = 2000))
predykcje <- data.frame(`_yhat_` = ifelse(
cp_curve$construction.year <= 1934,
predict(drzewo, data.frame(construction.year = 1934)),
ifelse(cp_curve$construction.year <= 1994 & cp_curve$construction.year > 1934,
predict(drzewo, 1960, predict(drzewo, 2000)))
))
predykcje <- data.frame(`_yhat_` = ifelse(
cp_curve$construction.year <= 1934,
predict(drzewo, data.frame(construction.year = 1934)),
ifelse(cp_curve$construction.year <= 1994 & cp_curve$construction.year > 1934,
predict(drzewo, 1960), predict(drzewo, 2000))
))
predykcje <- data.frame(`_yhat_` = ifelse(
cp_curve$construction.year <= 1934,
predict(drzewo, data.frame(construction.year = 1934)),
ifelse(cp_curve$construction.year <= 1994 & cp_curve$construction.year > 1934,
predict(drzewo, data.frame(construction.year = 1960)),
predict(drzewo, data.frame(construction.year = 2000)))
))
plot(predykcje)
predykcje <- data.frame(
construction.year = cp_curve$construction.year,
`_yhat_` = ifelse(
cp_curve$construction.year <= 1934,
predict(drzewo, data.frame(construction.year = 1934)),
ifelse(cp_curve$construction.year <= 1994 & cp_curve$construction.year > 1934,
predict(drzewo, data.frame(construction.year = 1960)),
predict(drzewo, data.frame(construction.year = 2000)))
))
plot(predykcje)
plot(cp_curve) +
geom_line(data = predykcje, aes(x = construction.year, y = `_yhat_`),
color = "black",
size = 1.5)
colnames(predykcje)
predykcje <- data.frame(
construction.year = cp_curve$construction.year,
`_yhat_` = ifelse(
cp_curve$construction.year <= 1934,
predict(drzewo, data.frame(construction.year = 1934)),
ifelse(cp_curve$construction.year <= 1994 & cp_curve$construction.year > 1934,
predict(drzewo, data.frame(construction.year = 1960)),
predict(drzewo, data.frame(construction.year = 2000)))
))
colnames(predykcje)
plot(cp_curve) +
geom_line(data = predykcje, aes(x = construction.year, y = `X_yhat_`),
color = "black",
size = 1.5,
inherit.aes = F)
plot(cp_curve)
plot(cp_curve) +
geom_line(data = predykcje, aes(x = construction.year, y = `X_yhat_`),
color = "black",
size = 1.5,
inherit.aes = F)
model_lok <- individual_surrogate_model(explainer, new_observation,
size = 500, seed = 17)
model_lok2 <- individual_surrogate_model(explainer2, new_observation,
size = 500, seed = 17)
plot(model_lok)
plot(cp_curve) +
geom_line(data = predykcje, aes(x = construction.year, y = `X_yhat_`, group = `X_yhat_`),
color = "black",
size = 1.5,
inherit.aes = F)
library(DALEX)
plot(single_variable(explainer, "construction.year"))
?plot.variable_response_explainer
plot(single_variable(explainer, "construction.year")) +
geom_line(size = 5)
plot(single_variable(explainer, "construction.year")) +
geom_line(size = 3)
plot(single_variable(explainer, "construction.year")) +
geom_line(size = 4)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
error = FALSE
)
library(DALEX2)
library(randomForest)
library(localModel)
data('HR')
set.seed(17)
mrf <- randomForest(status ~., data = HR, ntree = 100)
explainer <- explain(mrf,
HR[, -6])
new_observation <- HR[10, -6]
new_observation
model_lok <- individual_surrogate_model(explainer, new_observation,
size = 500, seed = 17)
plot(model_lok)
plot(model_lok, geom = "bar")
plot(single_variable(explainer, "age")) +
geom_line(size = 4)
library(DALEX)
plot(individual_conditional_expectations(
mrf,
new_observation = new_observation,
variables = 'construction.year',
data = apartments_test
))
plot(individual_conditional_expectations(
mrf,
new_observation = new_observation,
variables = 'age',
data = HR_test
))
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test
))
library(ceterisParibus2)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test
))
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test,
color = "_yhat_"
))
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test,
color = "_ids_"
))
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test),
color = "_ids_"
)
?individual_conditional_expectations
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y) predict(x, y)[, 1]),
color = "_ids_"
)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ...)[, 1]),
color = "_ids_"
)
predict(mrf, HR_test[1:2, ])
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:2, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[1:10, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
error = FALSE
)
library(DALEX2)
library(randomForest)
library(localModel)
data('HR')
set.seed(17)
mrf <- randomForest(status ~., data = HR, ntree = 100)
explainer <- explain(mrf,
HR[, -6])
new_observation <- HR[10, -6]
new_observation
model_lok <- individual_surrogate_model(explainer, new_observation,
size = 500, seed = 17)
plot(model_lok)
plot(model_lok, geom = "bar")
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
) +
geom_line(size = 4)
library(ceterisParibus2)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
) +
geom_line(size = 4)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
) +
geom_line(size = 4, aes(color = "_ids_"))
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
) +
geom_line(size = 4, aes_(color = "_ids_"))
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
) +
geom_line(size = 4, aes_(color = "_ids_"), inherit.aes = F)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
) +
geom_line(size = 4, aes_(color = "_ids_", x = age, y = "_yhat_"), inherit.aes = F)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
) +
geom_line(size = 4, aes_(color = "_ids_", x = "age", y = "_yhat_"), inherit.aes = F)
individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_"
)
individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1])
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_") +
geom_line(size = 4, aes_(color = "_ids_", x = "age", y = "_yhat_"), inherit.aes = F)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_") +
geom_line(aes_(color = "_ids_", x = "age", y = "_yhat_"),
size = 4,
inherit.aes = F)
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_")
?plot.individual_variable_profile_explainer
plot(individual_conditional_expectations(
mrf,
new_observation = HR_test[3:4, ],
variables = 'age',
data = HR_test,
predict_function = function(x, y, ...) predict(x, y, ..., type = "prob")[, 1]),
color = "_ids_", size = 4)
cranlogs::cran_downloads("kendallRandomWalks", "last-month") -> styczen_kendall
styczen_kendall
save(styczen_kendall, file = "styczen_kendall.rda")
cranlogs::cran_downloads("live", "last-month") -> styczen_live
styczen_live
save(styczen_live, file = "styczen_live.rda")
library(ceterisParibus2)
cp_curve <- individual_conditional_expectations(
mrf,
new_observation = new_observation,
variables = 'construction.year',
data = apartments_test
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE,
error = FALSE
)
library(DALEX2)
library(localModel)
library(randomForest)
data('apartments')
data('apartments_test')
set.seed(69)
mrf <- randomForest(m2.price ~., data = apartments, ntree = 50)
mlm <- lm(m2.price ~., data = apartments)
explainer <- DALEX2::explain(model = mrf,
data = apartments_test[, -1])
explainer2 <- DALEX2::explain(model = mlm,
data = apartments_test[, -1])
new_observation <- apartments_test[5, -1]
new_observation
model_lok <- individual_surrogate_model(explainer, new_observation,
size = 500, seed = 17)
model_lok2 <- individual_surrogate_model(explainer2, new_observation,
size = 500, seed = 17)
plot(model_lok, model_lok2)
plot(model_lok) + geom_line(size = 4)
cp_curve <- individual_conditional_expectations(
mrf,
new_observation = new_observation,
variables = 'construction.year',
data = apartments_test
)
plot(cp_curve, size = 4)
library(partykit)
drzewo <- ctree(`_yhat_` ~ construction.year, data = cp_curve,
maxdepth = 2)
plot(drzewo)
predict(drzewo, data.frame(construction.year = 2000))
# c.y <= 1934 -> 3401.545
# c.y > 1934 & c.y <= 1994 -> 3003.613
# c.y > 1940 & c.y <= 3269.458
predykcje <- data.frame(
construction.year = cp_curve$construction.year,
`_yhat_` = ifelse(
cp_curve$construction.year <= 1934,
predict(drzewo, data.frame(construction.year = 1934)),
ifelse(cp_curve$construction.year <= 1994 & cp_curve$construction.year > 1934,
predict(drzewo, data.frame(construction.year = 1960)),
predict(drzewo, data.frame(construction.year = 2000)))
))
plot(predykcje)
plot(cp_curve, size = 4) +
geom_line(data = predykcje, aes(x = construction.year, y = `X_yhat_`, group = `X_yhat_`),
color = "black",
size = 4,
inherit.aes = F)
??"confusion matrix"
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tableone)
library(mlr)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tableone)
library(mlr)
library(rms)
library(DataExplorer)
library('missMDA')
load("../data/hlh.rda")
hlh_c <- imputeFAMD(hlh[, -1])$completeObs %>%
mutate(Plec = hlh$Plec,
Gr_rozp_bez_dwa = hlh$Gr_rozp_bez_dwa,
przezyl_6mcy = hlh$przezyl_6mcy)
set.seed(17)
train_set <- sample(1:nrow(hlh), floor(0.6*nrow(hlh)))
test_set <- setdiff(1:nrow(hlh), train_set)
# las losowy:
mod_rf = train(randomForest, subsetTask(hlh_task, train_set))
hlh_task <- makeClassifTask(id = "hlh_task",
data = hlh_c,
target = "przezyl_6mcy")
hlh_c_xgboost <- createDummyFeatures(
hlh_c, target = "przezyl_6mcy",
cols = c(
"Plec",
"Gr_rozp_bez_dwa"
)
)
hlh_task_xgboost <- makeClassifTask(id = "hlh_task_xgboost",
data = hlh_c_xgboost,
target = "przezyl_6mcy")
logreg <- makeLearner("classif.logreg", predict.type = "prob")
lasso <- makeLearner("classif.cvglmnet", predict.type = "prob")
randomForest <- makeLearner("classif.randomForest", predict.type = "prob")
xgboost<- makeLearner("classif.xgboost", predict.type = "prob",par.vals = list(
objective = "binary:logistic",
eval_metric = "error",
nrounds = 200))
set.seed(17)
train_set <- sample(1:nrow(hlh), floor(0.6*nrow(hlh)))
test_set <- setdiff(1:nrow(hlh), train_set)
# las losowy:
mod_rf = train(randomForest, subsetTask(hlh_task, train_set))
# xgboost:
mod_xgb <- train(xgboost, subsetTask(hlh_task_xgboost, train_set))
# logreg:
mod_logreg <- train(logreg, subsetTask(hlh_task, train_set))
# lasso:
mod_lasso <- train(lasso, subsetTask(hlh_task, train_set))
?plotBMRBoxplots
?kable
getOption("digits")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Projekty/Projekt_1")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Projekty/Projekt_2")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Zadania_domowe/Zadanie_domowe_1")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Zadania_domowe/Zadanie_domowe_3")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Zadania_domowe/Zadanie_domowe_4")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Zadania_domowe/Zadanie_domowe_5")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Zadania_domowe/Zadanie_domowe_6")
setwd("C:/Users/mstaniak/Projekty/Studia/2019L-WUM/Zadania_domowe/Zadanie_domowe_9")
