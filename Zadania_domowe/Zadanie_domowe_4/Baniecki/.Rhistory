library(DALEX)
head(apartments)
dim(apartments)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(mlr)
library(knitr)
library(mlr)
set.seed(555)
library(DALEX)
library(OpenML)
temp <- getOMLDataSet(data.id = 197L)
cpuData <- temp$data
temp <- read.csv("winequality-red.csv")
temp <- na.omit(temp)
temp$quality <- as.factor(ifelse(temp$quality %in% c(3,4,5), 1, 0))
wineData <- temp
apartmentsData <- apartments
cv <- makeResampleDesc("CV", iters = 4)
clearn <- makeLearner("classif.svm", predict.type = "prob")
ps <- makeParamSet(
makeNumericParam("cost", lower = 0.01, upper = 100),
makeNumericParam("gamma", lower = 0.01, upper = 100)
)
ctrl <- makeTuneControlRandom(maxit = 100L)
res <- tuneParams("classif.svm", task = wineTask,
show.info = FALSE, resampling = cv, par.set = ps, control = ctrl)
wineTask <- makeClassifTask(id = "task", data = wineData, target = "quality")
cpuTask <- makeRegrTask(id = "task", data = cpuData, target = "usr")
apartmentsTask <- makeRegrTask(id = "task", data = apartmentsData, target = "m2.price")
res <- tuneParams("classif.svm", task = wineTask,
show.info = FALSE, resampling = cv, par.set = ps, control = ctrl)
lrn <- setHyperPars(clearn, par.vals = res$x)
r <- resample(lrn, wineTask, cv, measures = list(acc, auc))
Agr <- r$aggr
Agr
wineTask <- makeClassifTask(id = "task", data = wineData, target = "quality")
r <- resample(clearn, wineTask, cv, measures = list(acc, auc))
Agr <- r$aggr
Agr
res <- tuneParams("regr.svm", task = apartmentsTask,
show.info = FALSE, resampling = cv, par.set = ps, control = ctrl)
lrn <- setHyperPars(rlearn, par.vals = res$x)
rlearn <- makeLearner("regr.svm", predict.type = "response")
cv <- makeResampleDesc("CV", iters = 4)
clearn <- makeLearner("classif.svm", predict.type = "prob")
cpuTask <- makeRegrTask(id = "task", data = cpuData, target = "usr")
lrn <- setHyperPars(rlearn, par.vals = res$x)
r <- resample(lrn, cpuTask, cv, measures = list(mse,rmse,mae))
Agr <- r$aggr
Agr
cpuTask <- makeRegrTask(id = "task", data = cpuData, target = "usr")
r <- resample(rlearn, cpuTask, cv, measures = list(mse,rmse,mae))
Agr <- r$aggr
Agr
ps <- makeParamSet(
makeNumericParam("cost", lower = 0.001, upper = 100),
makeNumericParam("gamma", lower = 0.001, upper = 100)
)
ctrl <- makeTuneControlRandom(maxit = 100L)
ctrl <- makeTuneControlRandom(maxit = 200L)
ctrlGrid <- makeTuneControlGrid(resolution = 100L)
res <- tuneParams("regr.svm", task = cpuTask,
show.info = FALSE, resampling = cv, par.set = ps, control = ctrlGrid)
dim(cpuData)
library(DALEX)
library(OpenML)
temp <- getOMLDataSet(data.id = 197L)
cpuData <- temp$data
# temp <- read.csv("winequality-red.csv")
# temp <- na.omit(temp)
# temp$quality <- as.factor(ifelse(temp$quality %in% c(3,4,5), 1, 0))
# wineData <- temp
apartmentsData <- apartments
cv <- makeResampleDesc("CV", iters = 4)
clearn <- makeLearner("classif.svm", predict.type = "prob")
rlearn <- makeLearner("regr.svm", predict.type = "response")
cpuTask <- makeRegrTask(id = "task", data = cpuData, target = "usr")
r <- resample(rlearn, cpuTask, cv, measures = list(mse,rmse,mae))
Agr <- r$aggr
Agr
cpuDataN <- normalizeFeatures(cpuData, target = "usr")
apartmentsDataN <- normalizeFeatures(apartmentsData, target = "m2.price")
# wineDataN <- normalizeFeatures(wineData, target = "quality")
cpuTask <- makeRegrTask(id = "task", data = cpuDataN, target = "usr")
r <- resample(rlearn, cpuTask, cv, measures = list(mse,rmse,mae))
Agr <- r$aggr
Agr
wineTask <- makeClassifTask(id = "task", data = wineData, target = "quality")
r <- resample(clearn, wineTask, cv, measures = list(acc, auc))
Agr <- r$aggr
Agr
wineDataN <- normalizeFeatures(wineData, target = "quality")
wineTask <- makeClassifTask(id = "task", data = wineDataN, target = "quality")
r <- resample(clearn, wineTask, cv, measures = list(acc,auc))
Agr <- r$aggr
Agr
wineTask <- makeClassifTask(id = "task", data = wineData, target = "quality")
r <- resample(clearn, wineTask, cv, measures = list(acc, auc))
Agr <- r$aggr
Agr
wineDataN
apartmentsTask <- makeRegrTask(id = "task", data = apartmentsData, target = "m2.price")
r <- resample(rlearn, apartmentsTask, cv, measures = list(mse,rmse,mae))
Agr <- r$aggr
Agr
apartmentsTask <- makeRegrTask(id = "task", data = apartmentsDataN, target = "m2.price")
r <- resample(rlearn, apartmentsTask, cv, measures = list(mse,rmse,mae))
Agr <- r$aggr
Agr
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(mlr)
library(knitr)
library(mlr)
set.seed(555)
library(DALEX)
library(OpenML)
temp <- getOMLDataSet(data.id = 197L)
cpuData <- temp$data
# temp <- read.csv("winequality-red.csv")
# temp <- na.omit(temp)
# temp$quality <- as.factor(ifelse(temp$quality %in% c(3,4,5), 1, 0))
# wineData <- temp
apartmentsData <- apartments
cv <- makeResampleDesc("CV", iters = 4)
clearn <- makeLearner("classif.svm", predict.type = "prob")
rlearn <- makeLearner("regr.svm", predict.type = "response")
cpuDataN <- normalizeFeatures(cpuData, target = "usr")
apartmentsDataN <- normalizeFeatures(apartmentsData, target = "m2.price")
wineDataN <- normalizeFeatures(wineData, target = "quality")
cpuTask <- makeRegrTask(id = "task", data = cpuDataN, target = "usr")
r <- resample(rlearn, cpuTask, cv, measures = list(mse,rmse,mae))
Agr <- r$aggr
Agr
